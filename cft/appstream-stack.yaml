AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Webforx AppStream VDI Stack with Auto Scaling and 4-hour session timeout.

Parameters:
  VPCId:
    Type: String
  SubnetIds:
    Type: CommaDelimitedList
  SecurityGroupId:
    Type: String
  FleetName:
    Type: String
    Default: webforx-vdi-fleet
  BaseImageArn:
    Type: String
    Default: ""
    Description: "Optional base image ARN for ImageBuilder (e.g., latest Windows). Leave blank to skip."
  FleetImageArn:
    Type: String
    Default: ""
    Description: "Image ARN for the Fleet. If blank, BaseImageArn will be used."
  MinCapacity:
    Type: Number
    Default: 0
  DesiredCapacity:
    Type: Number
    Default: 0
  MaxCapacity:
    Type: Number
    Default: 5
  MaxUserSessionDurationHours:
    Type: Number
    Default: 4
  EnableAutoScaling:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"

Mappings:
  SessionDurationMap:
    "1":
      Seconds: 3600
    "2":
      Seconds: 7200
    "3":
      Seconds: 10800
    "4":
      Seconds: 14400
    "5":
      Seconds: 18000
    "6":
      Seconds: 21600
    "7":
      Seconds: 25200
    "8":
      Seconds: 28800

Resources:
  AppStreamFleet:
    Type: AWS::AppStream::Fleet
    Properties:
      Name: !Ref FleetName
      InstanceType: stream.standard.medium
      ImageArn: !If [UseFleetImage, !Ref FleetImageArn, !Ref BaseImageArn]
      ComputeCapacity:
        DesiredInstances: !Ref DesiredCapacity
      VpcConfig:
        SecurityGroupIds: [!Ref SecurityGroupId]
        SubnetIds: !Ref SubnetIds
      StreamView: APPLICATION
      MaxUserDurationInSeconds: !FindInMap [SessionDurationMap, !Ref MaxUserSessionDurationHours, Seconds]
      DisconnectTimeoutInSeconds: 900
      IdleDisconnectTimeoutInSeconds: 900
      EnableDefaultInternetAccess: true
      FleetType: ON_DEMAND

  AppStreamScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: EnableAutoScalingCondition
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub fleet/${AppStreamFleet}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/appstream.amazonaws.com/AWSServiceRoleForAppStream
      ScalableDimension: appstream:fleet:DesiredCapacity
      ServiceNamespace: appstream

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: EnableAutoScalingCondition
    Properties:
      PolicyName: !Sub "${FleetName}-target-tracking"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AppStreamScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: AppStreamAverageCapacityUtilization
        TargetValue: 80.0

  ImageBuilder:
    Condition: CreateImageBuilder
    Type: AWS::AppStream::ImageBuilder
    Properties:
      ImageArn: !Ref BaseImageArn

Conditions:
  EnableAutoScalingCondition: !Equals [!Ref EnableAutoScaling, "true"]
  CreateImageBuilder: !Not [!Equals [!Ref BaseImageArn, ""]]
  EnableScaling: !Equals [!Ref EnableAutoScaling, "true"]
  UseFleetImage: !Not [!Equals [!Ref FleetImageArn, ""]]

Outputs:
  FleetName:
    Value: !Ref AppStreamFleet
    Description: The AppStream Fleet name

  StackStatus:
    Value: "CREATED"
